<?xml version="1.0" encoding="UTF-8"?>
<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
  <!-- 动态日志级别 -->
  <!--  <jmxConfigurator/>-->
  <!-- 定义日志文件 输出位置 -->
  <!--LogStash访问host-->
  <springProperty name="LOG_STASH_HOST" scope="context" source="logstash.host"
    defaultValue="localhost"/>

  <property name="log.path" value="${catalina.base}/logs/"/>
  <!-- 日志最大的历史 30天 -->
  <property name="maxHistory" value="30"/>
  <!--如果需要启用颜色的话就需要包含这个配置文件-->
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
  <!-- 设置日志输出格式 -->
  <property name="LOG_PATTERN"
    value="%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} [%X{RequestId}] [%thread] [%logger{50}] - %msg%n"/>
  <!-- ConsoleAppender 控制台输出日志 -->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>
        ${LOG_PATTERN}
      </pattern>
    </encoder>
  </appender>

  <!-- ERROR级别日志 -->
  <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!--记录的日志文件的路径及文件名-->
    <file>${log.path}/error.log</file>
    <!-- 过滤器，只记录WARN级别的日志 -->
    <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 设置过滤级别 -->
      <level>ERROR</level>
      <!-- 用于配置符合过滤条件的操作 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 -->
      <onMismatch>DENY</onMismatch>
    </filter>
    <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
    <!--日志记录器的滚动策略，按日期，按大小记录-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.path}/%d{yyyy-MM,aux}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
      <maxFileSize>10MB</maxFileSize>
      <totalSizeCap>1GB</totalSizeCap>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <MaxFileSize>20MB</MaxFileSize>
    </triggeringPolicy>
    <encoder>
      <pattern>
        ${LOG_PATTERN}
      </pattern>
    </encoder>
  </appender>

  <!-- INFO级别日志 appender -->
  <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!--记录的日志文件的路径及文件名-->
    <file>${log.path}/info.log</file>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <!--日志记录器的滚动策略，按日期，按大小记录-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.path}/%d{yyyy-MM,aux}/info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
      <maxFileSize>10MB</maxFileSize>
      <totalSizeCap>1GB</totalSizeCap>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <MaxFileSize>20MB</MaxFileSize>
    </triggeringPolicy>
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- DEBUG级别日志 appender -->
  <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!--记录的日志文件的路径及文件名-->
    <file>${log.path}/debug.log</file>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <!--日志记录器的滚动策略，按日期，按大小记录-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.path}/%d{yyyy-MM,aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
      <maxFileSize>10MB</maxFileSize>
      <totalSizeCap>1GB</totalSizeCap>
    </rollingPolicy>
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
    </encoder>
  </appender>


  <Logger name="org.springframework.data.convert.CustomConversions" level="ERROR"/>
  <!-- root级别 DEBUG -->
  <root>
    <!-- 打印debug级别日志及以上级别日志 -->
    <level value="info"/>
    <!-- 控制台输出 -->
    <appender-ref ref="console"/>
    <!-- 文件输出 -->
    <appender-ref ref="ERROR"/>
    <appender-ref ref="INFO"/>
  </root>
</configuration>